#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#


#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: org1

  logging:
    level: debug

  # Global configuration for peer, event service and orderer timeouts
  # if this this section is omitted, then default values will be used (same values as below)
  #  peer:
  #    timeout:
  #      connection: 10s
  #      response: 180s
  #      discovery:
  #        # Expiry period for discovery service greylist filter
  #        # The channel client will greylist peers that are found to be offline
  #        # to prevent re-selecting them in subsequent retries.
  #        # This interval will define how long a peer is greylisted
  #        greylistExpiry: 10s
  eventService:
    # Event service type (optional). If not specified then the type is automatically
    # determined from channel capabilities.
    type: eventhub
    # the below timeouts are commented out to use the default values that are found in
    # "pkg/fab/endpointconfig.go"
    # the client is free to override the default values by uncommenting and resetting
    # the values as they see fit in their config file
  #    timeout:
  #      connection: 15s
  #      registrationResponse: 15s
  #  orderer:
  #    timeout:
  #      connection: 15s
  #      response: 15s
  #  global:
  #    timeout:
  #      query: 180s
  #      execute: 180s
  #      resmgmt: 180s
  #    cache:
  #      connectionIdle: 30s
  #      eventServiceIdle: 2m
  #      channelConfig: 30m
  #      channelMembership: 30s
  #      discovery: 10s
  #      selection: 10m

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: ${GOPATH}/src/github.com/hyperledger/fabric/examples/e2e_cli/crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/state-store"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

    # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/config/mutual_tls/client_sdk_go-key.pem
      cert:
        path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/config/mutual_tls/client_sdk_go.pem


channels:
  mychannel:
    orderers:
      - orderer.example.com
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

#      peer1.org1.example.com:
#        endorsingPeer: true
#        chaincodeQuery: true
#        ledgerQuery: true
#        eventSource: true

#      peer0.org3.example.com:
#        endorsingPeer: true
#        chaincodeQuery: true
#        ledgerQuery: true
#        eventSource: true
#
#      peer1.org3.example.com:
#        endorsingPeer: true
#        chaincodeQuery: true
#        ledgerQuery: true
#        eventSource: true

    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

#  mychannel1:
#    orderers:
#      - orderer.example.com
#      peers:
#        peer0.org2.example.com:
#          endorsingPeer: true
#          chaincodeQuery: true
#          ledgerQuery: true
#          eventSource: true
#
#        peer1.org2.example.com:
#          endorsingPeer: true
#          chaincodeQuery: true
#          ledgerQuery: true
#          eventSource: true
#
#        peer0.org3.example.com:
#          endorsingPeer: true
#          chaincodeQuery: true
#          ledgerQuery: true
#          eventSource: true
#
#        peer1.org3.example.com:
#          endorsingPeer: true
#          chaincodeQuery: true
#          ledgerQuery: true
#          eventSource: true
#
#
#      policies:
#        queryChannelConfig:
#          minResponses: 1
#          maxTargets: 1
#          retryOpts:
#            attempts: 5
#            initialBackoff: 500ms
#            maxBackoff: 5s
#            backoffFactor: 2.0


#
# list of participating organizations in this network
#
organizations:
  org1:
    mspid: Org1MSP
    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath: peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

    peers:
      - peer0.org1.example.com
      #- peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      #- ca.org1.example.com

#  org2:
#    mspid: Org2MSP
#    # This org's MSP store (absolute path or relative to client.cryptoconfig)
#    cryptoPath:  peerOrganizations/org2.example.com/users/{username}@org2.example.com/msp
#
#    peers:
#      - peer0.org2.example.com
#      - peer1.org2.example.com
#
#    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
#    # network. Typically certificates provisioning is done in a separate process outside of the
#    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
#    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
#    # Fabric-CA servers.
#    certificateAuthorities:
#      - ca.org2.example.com
#
#  org3:
#    mspid: Org3MSP
#    # This org's MSP store (absolute path or relative to client.cryptoconfig)
#    cryptoPath:  peerOrganizations/org3.example.com/users/{username}@org3.example.com/msp
#
#    peers:
#      - peer0.org3.imocc.com
#      - peer1.org3.imocc.com
#
#    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
#    # network. Typically certificates provisioning is done in a separate process outside of the
#    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
#    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
#    # Fabric-CA servers.
#    certificateAuthorities:
#      - ca.org3.example.com

  # Orderer Org name
  ordererorg:
    # Membership Service Provider ID for this organization

    mspID: "OrdererMSP"

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
    cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: 127.0.0.1:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: true # 非tls连接

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: 127.0.0.1:7051
    # eventUrl is only needed when using eventhub (default is delivery service)
    eventUrl: 127.0.0.1:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: true

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

#  peer1.org1.example.com:
#    # this URL is used to send endorsement and query requests
#    url: 127.0.0.1:8051
#    # eventUrl is only needed when using eventhub (default is delivery service)
#    eventUrl: 127.0.0.1:8053
#
#    grpcOptions:
#      ssl-target-name-override: peer1.org1.example.com
#      # These parameters should be set in coordination with the keepalive policy on the server,
#      # as incompatible settings can result in closing of connection.
#      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
#      keep-alive-time: 0s
#      keep-alive-timeout: 20s
#      keep-alive-permit: false
#      fail-fast: false
#      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: true
#
#    tlsCACerts:
#      # Certificate location absolute path
#      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
#
#  peer0.org2.example.com:
#    # this URL is used to send endorsement and query requests
#    url: 127.0.0.1:9051
#    # eventUrl is only needed when using eventhub (default is delivery service)
#    eventUrl: 127.0.0.1:9053
#
#    grpcOptions:
#      ssl-target-name-override: peer0.org2.example.com
#      # These parameters should be set in coordination with the keepalive policy on the server,
#      # as incompatible settings can result in closing of connection.
#      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
#      keep-alive-time: 0s
#      keep-alive-timeout: 20s
#      keep-alive-permit: false
#      fail-fast: false
#      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: true
#
#    tlsCACerts:
#      # Certificate location absolute path
#      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
#
#  peer1.org2.example.com:
#    # this URL is used to send endorsement and query requests
#    url: 127.0.0.1:10051
#    # eventUrl is only needed when using eventhub (default is delivery service)
#    eventUrl: 127.0.0.1:10053
#
#    grpcOptions:
#      ssl-target-name-override: peer1.org2.example.com
#      # These parameters should be set in coordination with the keepalive policy on the server,
#      # as incompatible settings can result in closing of connection.
#      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
#      keep-alive-time: 0s
#      keep-alive-timeout: 20s
#      keep-alive-permit: false
#      fail-fast: false
#      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: true
#
#    tlsCACerts:
#      # Certificate location absolute path
#      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
#
#  peer0.org3.example.com:
#    # this URL is used to send endorsement and query requests
#    url: 127.0.0.1:11051
#    # eventUrl is only needed when using eventhub (default is delivery service)
#    eventUrl: 127.0.0.1:11053
#
#    grpcOptions:
#      ssl-target-name-override: peer0.org3.example.com
#      # These parameters should be set in coordination with the keepalive policy on the server,
#      # as incompatible settings can result in closing of connection.
#      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
#      keep-alive-time: 0s
#      keep-alive-timeout: 20s
#      keep-alive-permit: false
#      fail-fast: false
#      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: true
#
#    tlsCACerts:
#      # Certificate location absolute path
#      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
#
#  peer1.org3.example.com:
#    # this URL is used to send endorsement and query requests
#    url: 127.0.0.1:12051
#    # eventUrl is only needed when using eventhub (default is delivery service)
#    eventUrl: 127.0.0.1:12053
#
#    grpcOptions:
#      ssl-target-name-override: peer1.org3.example.com
#      # These parameters should be set in coordination with the keepalive policy on the server,
#      # as incompatible settings can result in closing of connection.
#      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
#      keep-alive-time: 0s
#      keep-alive-timeout: 20s
#      keep-alive-permit: false
#      fail-fast: false
#      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: true
#
#    tlsCACerts:
#      # Certificate location absolute path
#      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
entityMatchers:

  peer:

    - pattern: (\w+).org1.example.com:(\d+)

      urlSubstitutionExp: $1.org1.example.com:$2

      sslTargetOverrideUrlSubstitutionExp: $1.org1.example.com

      mappedHost: peer0.org1.example.com



    - pattern: (\w+).org1.example.(\w+)

      urlSubstitutionExp: 127.0.0.1:7051

      eventUrlSubstitutionExp: 127.0.0.1:7053

      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com

      mappedHost: peer0.org1.example.com

  orderer:

    - pattern: (\w+).example.(\w+)

      urlSubstitutionExp: 127.0.0.1:7050

      mappedHost: orderer.example.com